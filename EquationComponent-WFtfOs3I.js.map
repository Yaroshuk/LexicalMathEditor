{"version":3,"file":"EquationComponent-WFtfOs3I.js","sources":["../node_modules/clsx/dist/clsx.m.js","../src/EquationPlugin/EquationComponent.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-namespace\n    namespace JSX {\n        interface IntrinsicElements {\n            'math-field': React.DetailedHTMLProps<\n                React.HTMLAttributes<MathfieldElement>,\n                MathfieldElement\n            >\n        }\n    }\n}\n\nimport '//unpkg.com/mathlive'\n\nimport type { JSX } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection'\nimport { mergeRegister } from '@lexical/utils'\nimport {\n    $createRangeSelection,\n    $getNodeByKey,\n    $getSelection,\n    $isNodeSelection,\n    $isParagraphNode,\n    $isRangeSelection,\n    $setSelection,\n    BaseSelection,\n    CLICK_COMMAND,\n    COMMAND_PRIORITY_HIGH,\n    COMMAND_PRIORITY_LOW,\n    CommandListener,\n    createCommand,\n    KEY_DOWN_COMMAND,\n    LexicalCommand,\n    LexicalEditor,\n    LexicalNode,\n    NodeKey,\n} from 'lexical'\nimport { useCallback, useEffect, useRef, useState } from 'react'\n\nimport { $isEquationNode, EquationNode } from './EquationNode'\nimport styles from './Equations.module.scss'\nimport { MathfieldElement } from 'mathlive'\nimport clsx from 'clsx'\n\nexport type FocusCustomInputPayload = {\n    nodeKey: NodeKey\n    cursorPosition?: 'start' | 'end'\n}\n\nexport const FOCUS_CUSTOM_INPUT_COMMAND: LexicalCommand<FocusCustomInputPayload> =\n    createCommand('focus-custom-input')\n\ntype EquationComponentProps = {\n    equation: string\n    initialFocus: boolean\n    nodeKey: NodeKey\n}\n\nexport default function EquationComponent({\n    equation,\n    nodeKey,\n    initialFocus,\n}: EquationComponentProps): JSX.Element {\n    const [editor] = useLexicalComposerContext()\n    const [showEquationEditor] = useState<boolean>(false)\n    const [selection, setSelection] = useState<BaseSelection | null>(null)\n    const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey)\n    const ref = useRef<MathfieldElement | null>(null)\n\n    const registerCustomInputCommands = useCallback(\n        (editor: LexicalEditor) => {\n            return mergeRegister(\n                editor.registerCommand<FocusCustomInputPayload>(\n                    FOCUS_CUSTOM_INPUT_COMMAND,\n                    payload => {\n                        if (payload?.nodeKey !== nodeKey) {\n                            return false\n                        }\n\n                        const mathElement = ref.current as MathfieldElement\n\n                        if (!mathElement) {\n                            return false\n                        }\n\n                        editor.blur()\n                        mathElement.focus()\n\n                        if (payload.cursorPosition === 'end') {\n                            mathElement.executeCommand('moveToMathfieldEnd')\n                        }\n\n                        if (payload.cursorPosition === 'start') {\n                            mathElement.executeCommand('moveToMathfieldStart')\n                        }\n\n                        return true\n                    },\n                    COMMAND_PRIORITY_HIGH,\n                ),\n            )\n        },\n        [nodeKey],\n    )\n\n    useEffect(() => {\n        if (initialFocus) {\n            editor.update(() => {\n                const node = $getNodeByKey(nodeKey)\n\n                if (node) {\n                    const writable = node.getWritable() as EquationNode\n\n                    writable.__initialFocus = false\n                }\n            })\n        }\n    }, [initialFocus, editor, nodeKey])\n\n    useEffect(() => {\n        if (ref.current === null) {\n            return\n        }\n\n        const mathinput = ref.current as MathfieldElement\n        mathinput.value = equation\n    }, [equation])\n\n    const onEditorKeyDownHandler: CommandListener<KeyboardEvent> = useCallback((event, editor) => {\n        const target = event.target as HTMLElement\n\n        if (!target.dataset?.lexicalEditor) return false\n\n        const selection = $getSelection()\n\n        if (!$isRangeSelection(selection) || selection.isCollapsed() === false) {\n            return false\n        }\n\n        const anchorNode = selection.anchor.getNode()\n\n        if (event.key === 'ArrowLeft') {\n            let node: LexicalNode | null = null\n\n            if ($isParagraphNode(anchorNode)) {\n                if (selection.anchor.offset === 0) {\n                    return false\n                } else {\n                    node = anchorNode.getChildAtIndex(selection.anchor.offset - 1)\n                }\n            } else if (selection.anchor.offset === 0) {\n                node = anchorNode.getPreviousSibling()\n            }\n\n            if (!node) return false\n\n            if (node && node.__type === 'equation') {\n                editor.dispatchCommand(FOCUS_CUSTOM_INPUT_COMMAND, {\n                    nodeKey: node.__key,\n                    cursorPosition: 'end',\n                })\n                event.preventDefault()\n                return true\n            }\n        }\n\n        if (event.key === 'ArrowRight') {\n            let node: LexicalNode | null = null\n\n            if ($isParagraphNode(anchorNode)) {\n                console.log('111', selection.anchor.offset, anchorNode.getChildrenSize())\n\n                if (selection.anchor.offset === anchorNode.getChildrenSize()) {\n                    return false\n                } else {\n                    node = anchorNode.getChildAtIndex(selection.anchor.offset)\n                    console.log('node', node)\n                }\n\n            } else if (selection.anchor.offset === anchorNode.getTextContent().length) {\n                node = anchorNode.getNextSibling()\n            }\n\n            if (!node) return false\n\n            if (node && node.__type === 'equation') {\n                editor.dispatchCommand(FOCUS_CUSTOM_INPUT_COMMAND, {\n                    nodeKey: node.__key,\n                    cursorPosition: 'start',\n                })\n                event.preventDefault()\n                return true\n            }\n        }\n\n        return false\n    }, [])\n\n    const setEditorFocus = useCallback(\n        (node: LexicalNode, position: 'after' | 'before' = 'after') => {\n            if (!node) {\n                return\n            }\n            const parentNode = node.getParent()\n            if (!parentNode) {\n                return\n            }\n\n            const nodeIndex = parentNode.getChildren().indexOf(node)\n            const selection = $createRangeSelection()\n\n            if (position === 'after') {\n                selection.anchor.set(parentNode.__key, nodeIndex + 1, 'element')\n                selection.focus.set(parentNode.__key, nodeIndex + 1, 'element')\n            } else {\n                selection.anchor.set(parentNode.__key, nodeIndex, 'element')\n                selection.focus.set(parentNode.__key, nodeIndex, 'element')\n            }\n            $setSelection(selection)\n            editor.focus()\n        },\n        [editor],\n    )\n\n    const onMathFieldKeyDownHandler: CommandListener<KeyboardEvent> = useCallback(\n        event => {\n            const target = event.target as MathfieldElement\n\n            const selection = target.selection\n            const contentValue = target.value\n\n            const nodeKey = target.dataset.key\n\n            if (!nodeKey) {\n                return false\n            }\n\n            const node = $getNodeByKey(nodeKey)\n\n            if (!node) {\n                return false\n            }\n\n            if (event.key === 'ArrowLeft') {\n                if (selection.ranges[0][0] === 0 && selection.ranges[0][1] === 0) {\n                    target.blur()\n\n                    setEditorFocus(node, 'before')\n\n                    return true\n                }\n\n                return false\n            }\n\n            if (event.key === 'ArrowRight') {\n                const selectedValue = target.getValue(0, selection.ranges[0][1])\n\n                if (contentValue.length === selectedValue.length) {\n                    target.blur()\n\n                    setEditorFocus(node, 'after')\n\n                    return true\n                }\n\n                return false\n            }\n\n            return false\n        },\n        [setEditorFocus],\n    )\n\n    useEffect(() => {\n        return mergeRegister(\n            editor.registerUpdateListener(({ editorState }) => {\n                setSelection(editorState.read(() => $getSelection()))\n            }),\n            editor.registerCommand<MouseEvent>(\n                CLICK_COMMAND,\n                payload => {\n                    const event = payload\n\n                    if (event.target === ref.current) {\n                        // editor.blur()\n                        // event.target?.focus()\n\n                        if (!event.shiftKey) {\n                            clearSelection()\n                        }\n                        setSelected(!isSelected)\n                        return true\n                    }\n\n                    return false\n                },\n                COMMAND_PRIORITY_LOW,\n            ),\n            editor.registerCommand<KeyboardEvent>(\n                KEY_DOWN_COMMAND,\n                payload => {\n                    const target = payload.target as HTMLElement\n\n                    console.log('KEY_DOWN_COMMAND')\n                    if (target.tagName === 'MATH-FIELD') {\n                        return onMathFieldKeyDownHandler(payload, editor)\n                    }\n\n                    return onEditorKeyDownHandler(payload, editor)\n                },\n                COMMAND_PRIORITY_HIGH,\n            ),\n        )\n    }, [\n        clearSelection,\n        editor,\n        isSelected,\n        nodeKey,\n        onEditorKeyDownHandler,\n        onMathFieldKeyDownHandler,\n        setSelected,\n        showEquationEditor,\n    ])\n\n    useEffect(() => {\n        registerCustomInputCommands(editor)\n    }, [editor, registerCustomInputCommands])\n\n    const isFocused = $isNodeSelection(selection) && isSelected\n\n    const changeHandler = (value: string) => {\n        editor.update(() => {\n            const node = $getNodeByKey(nodeKey)\n\n            console.log('changeHandler', node, value)\n\n            if ($isEquationNode(node)) {\n                node.setEquation(value)\n            }\n        })\n    }\n\n    const setEditorFocusAfterEquation = () => {\n        //let selection = $getSelection()\n\n        editor.update(() => {\n            const node = $getNodeByKey(nodeKey)\n\n            if (node) {\n                setEditorFocus(node, 'after')\n            }\n        })\n    }\n\n    return (\n        <>\n            <span className={clsx(styles.MathField, isFocused && styles.Focused)}>\n                <math-field\n                    onInput={evt => changeHandler((evt.target as MathfieldElement).value)}\n                    data-key={nodeKey}\n                    ref={elem => {\n                        if (elem === null) {\n                            return\n                        }\n\n                        const mathinput = elem as MathfieldElement\n                        mathinput.value = equation\n\n                        if (initialFocus) {\n                            mathinput?.focus()\n\n                            if (equation.includes('placeholder{}')) {\n                                mathinput?.executeCommand('moveToNextPlaceholder')\n                            } else {\n                                mathinput?.executeCommand('moveToMathfieldEnd')\n                            }\n                        }\n\n                        mathinput.onchange = (event: Event) => {\n                            const target = event.target as MathfieldElement\n                            console.log('onchange', target, target.value)\n                            target.blur()\n                            setTimeout(() => {\n                                setEditorFocusAfterEquation()\n                            }, 0)\n\n                            event.stopPropagation()\n                            return false\n                        }\n\n                        ref.current = elem\n                    }}\n                    tabIndex={-1}\n                />\n            </span>\n        </>\n    )\n}\n"],"names":["r","e","t","f","n","clsx","FOCUS_CUSTOM_INPUT_COMMAND","createCommand","EquationComponent","equation","nodeKey","initialFocus","editor","useLexicalComposerContext","showEquationEditor","useState","selection","setSelection","isSelected","setSelected","clearSelection","useLexicalNodeSelection","ref","useRef","registerCustomInputCommands","useCallback","mergeRegister","payload","mathElement","COMMAND_PRIORITY_HIGH","useEffect","node","$getNodeByKey","writable","mathinput","onEditorKeyDownHandler","event","_a","$getSelection","$isRangeSelection","anchorNode","$isParagraphNode","setEditorFocus","position","parentNode","nodeIndex","$createRangeSelection","$setSelection","onMathFieldKeyDownHandler","target","contentValue","selectedValue","editorState","CLICK_COMMAND","COMMAND_PRIORITY_LOW","KEY_DOWN_COMMAND","isFocused","$isNodeSelection","changeHandler","value","$isEquationNode","setEditorFocusAfterEquation","jsx","Fragment","styles","evt","elem"],"mappings":"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","x_google_ignoreList":[0]}